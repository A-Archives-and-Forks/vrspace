/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import {ApiClient} from "../ApiClient.js";
import { GltfModel } from '../model/GltfModel.js';
import { LoginResponse } from '../model/LoginResponse.js';
import { ModelSearchRequest } from '../model/ModelSearchRequest.js';
import { ModelSearchResponse } from '../model/ModelSearchResponse.js';

/**
* Sketchfab service.
* @module api/SketchfabApi
* @version v0
*/
export class SketchfabApi {

    /**
    * Constructs a new SketchfabApi. 
    * @alias module:api/SketchfabApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} uid 
     * @return {Promise< GltfModel >} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link GltfModel} and HTTP response
     */
    downloadWithHttpInfo(uid) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling download");
      }

      let pathParams = {
      };
      let queryParams = {
        'uid': uid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GltfModel;
      return this.apiClient.callApi(
        '/vrspace/api/sketchfab/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} uid 
     * @return {Promise< GltfModel >} a {@link https://www.promisejs.org/|Promise}, with data of type {@link GltfModel}
     */
    download(uid) {
      return this.downloadWithHttpInfo(uid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise< Boolean >} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    isAvailableWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/vrspace/api/sketchfab/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise< Boolean >} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    isAvailable() {
      return this.isAvailableWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {ModelSearchRequest} modelSearchRequest 
     * @return {Promise< ModelSearchResponse >} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link ModelSearchResponse} and HTTP response
     */
    searchModelsWithHttpInfo(modelSearchRequest) {
      let postBody = modelSearchRequest;
      // verify the required parameter 'modelSearchRequest' is set
      if (modelSearchRequest === undefined || modelSearchRequest === null) {
        throw new Error("Missing the required parameter 'modelSearchRequest' when calling searchModels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ModelSearchResponse;
      return this.apiClient.callApi(
        '/vrspace/api/sketchfab/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {ModelSearchRequest} modelSearchRequest 
     * @return {Promise< ModelSearchResponse >} a {@link https://www.promisejs.org/|Promise}, with data of type {@link ModelSearchResponse}
     */
    searchModels(modelSearchRequest) {
      return this.searchModelsWithHttpInfo(modelSearchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} code 
     * @return {Promise< String >} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    sketchfabCallbackWithHttpInfo(code) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling sketchfabCallback");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/vrspace/api/sketchfab/oauth2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} code 
     * @return {Promise< String >} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    sketchfabCallback(code) {
      return this.sketchfabCallbackWithHttpInfo(code)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise< LoginResponse >} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link LoginResponse} and HTTP response
     */
    sketchfabLoginWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/vrspace/api/sketchfab/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise< LoginResponse >} a {@link https://www.promisejs.org/|Promise}, with data of type {@link LoginResponse}
     */
    sketchfabLogin() {
      return this.sketchfabLoginWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
