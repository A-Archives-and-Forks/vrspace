/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import { Animation } from './Animation.js';
import { Point } from './Point.js';
import { Rotation } from './Rotation.js';

/**
 * The VRObject model module.
 * @module model/VRObject
 * @version v0
 */
export class VRObject {
    /**
     * Constructs a new <code>VRObject</code>.
     * Basic VR Object encapsulates minimal spatial and other properties.
     * @alias VRObject
     */
    constructor() { 
        
        VRObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VRObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {VRObject} obj Optional instance to populate.
     * @return {VRObject} The populated <code>VRObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VRObject();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = Point.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = Rotation.constructFromObject(data['rotation']);
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = Point.constructFromObject(data['scale']);
            }
            if (data.hasOwnProperty('permanent')) {
                obj['permanent'] = ApiClient.convertToType(data['permanent'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('mesh')) {
                obj['mesh'] = ApiClient.convertToType(data['mesh'], 'String');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
            if (data.hasOwnProperty('animation')) {
                obj['animation'] = Animation.constructFromObject(data['animation']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': Object});
            }
            if (data.hasOwnProperty('temporary')) {
                obj['temporary'] = ApiClient.convertToType(data['temporary'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VRObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VRObject</code>.
     */
    static validateJSON(data) {
        // validate the optional field `position`
        if (data['position']) { // data not null
          Point.validateJSON(data['position']);
        }
        // validate the optional field `rotation`
        if (data['rotation']) { // data not null
          Rotation.validateJSON(data['rotation']);
        }
        // validate the optional field `scale`
        if (data['scale']) { // data not null
          Point.validateJSON(data['scale']);
        }
        // ensure the json data is a string
        if (data['mesh'] && !(typeof data['mesh'] === 'string' || data['mesh'] instanceof String)) {
            throw new Error("Expected the field `mesh` to be a primitive type in the JSON string but got " + data['mesh']);
        }
        // ensure the json data is a string
        if (data['script'] && !(typeof data['script'] === 'string' || data['script'] instanceof String)) {
            throw new Error("Expected the field `script` to be a primitive type in the JSON string but got " + data['script']);
        }
        // validate the optional field `animation`
        if (data['animation']) { // data not null
          Animation.validateJSON(data['animation']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
VRObject.prototype['id'] = undefined;

/**
 * @member {Point} position
 */
VRObject.prototype['position'] = undefined;

/**
 * @member {Rotation} rotation
 */
VRObject.prototype['rotation'] = undefined;

/**
 * @member {Point} scale
 */
VRObject.prototype['scale'] = undefined;

/**
 * Permanent objects are always present (e.g. sky)
 * @member {Boolean} permanent
 */
VRObject.prototype['permanent'] = undefined;

/**
 * Whether an object is active (can send events). E.g. online users, robots.
 * @member {Boolean} active
 */
VRObject.prototype['active'] = undefined;

/**
 * URL of the file containing the mesh.
 * @member {String} mesh
 */
VRObject.prototype['mesh'] = undefined;

/**
 * Script that client runs. To prevent cross-site scripting, this is a read-only   property.
 * @member {String} script
 */
VRObject.prototype['script'] = undefined;

/**
 * @member {Animation} animation
 */
VRObject.prototype['animation'] = undefined;

/**
 * Custom transient object properties
 * @member {Object.<String, Object>} properties
 */
VRObject.prototype['properties'] = undefined;

/**
 * Temporary objects will be deleted from the database along with their owner
 * @member {Boolean} temporary
 */
VRObject.prototype['temporary'] = undefined;






export default VRObject;

