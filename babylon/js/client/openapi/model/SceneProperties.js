/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The SceneProperties model module.
 * @module model/SceneProperties
 * @version v0
 */
export class SceneProperties {
    /**
     * Constructs a new <code>SceneProperties</code>.
     * Scene properties that determine how far user sees, how often scene is  refreshed, etc. This is a component to be injected, and used as factory when  constructing Scene for every client.
     * @alias SceneProperties
     */
    constructor() { 
        
        SceneProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SceneProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {SceneProperties} obj Optional instance to populate.
     * @return {SceneProperties} The populated <code>SceneProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SceneProperties();

            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], 'Number');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SceneProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SceneProperties</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Visibility range, default 2000. Property: vrspace.scene.range
 * @member {Number} range
 */
SceneProperties.prototype['range'] = undefined;

/**
 * Resolution describes how far one can go before scene is updated, default 10.  Property: vrspace.scene.resolution
 * @member {Number} resolution
 */
SceneProperties.prototype['resolution'] = undefined;

/**
 * Maximum number of objects in the scene, default 1000. Property:  vrspace.scene.size
 * @member {Number} size
 */
SceneProperties.prototype['size'] = undefined;

/**
 * Scene is refreshed after this many milliseconds, default 30000. Property:  vrspace.scene.timeout
 * @member {Number} timeout
 */
SceneProperties.prototype['timeout'] = undefined;






export default SceneProperties;

