/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The ServerCapabilities model module.
 * @module model/ServerCapabilities
 * @version v0
 */
export class ServerCapabilities {
    /**
     * Constructs a new <code>ServerCapabilities</code>.
     * @alias ServerCapabilities
     */
    constructor() { 
        
        
        /**
         * Oauth2 authentication is supported, and the endpoint is available
         * @type {Boolean} oauth2
         */
        this.oauth2 = undefined;

        /**
         * Remote browsing with selenium is supported, and the endpoint is available
         * @type {Boolean} remoteBrowser
         */
        this.remoteBrowser = undefined;

        /**
         * The server supports video/audio streaming
         * @type {Boolean} streamingMedia
         */
        this.streamingMedia = undefined;

        /**
         * Download of 3d content from sketchfab is allowed
         * @type {Boolean} sketchfab
         */
        this.sketchfab = undefined;

        /**
         * Web Push messages for groups and world invitations are configured
         * @type {Boolean} webPush
         */
        this.webPush = undefined;
        
        
        
        
        ServerCapabilities.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServerCapabilities</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {ServerCapabilities} obj Optional instance to populate.
     * @return {ServerCapabilities} The populated <code>ServerCapabilities</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerCapabilities();

            if (data.hasOwnProperty('oauth2')) {
                obj['oauth2'] = ApiClient.convertToType(data['oauth2'], 'Boolean');
            }
            if (data.hasOwnProperty('remoteBrowser')) {
                obj['remoteBrowser'] = ApiClient.convertToType(data['remoteBrowser'], 'Boolean');
            }
            if (data.hasOwnProperty('streamingMedia')) {
                obj['streamingMedia'] = ApiClient.convertToType(data['streamingMedia'], 'Boolean');
            }
            if (data.hasOwnProperty('sketchfab')) {
                obj['sketchfab'] = ApiClient.convertToType(data['sketchfab'], 'Boolean');
            }
            if (data.hasOwnProperty('webPush')) {
                obj['webPush'] = ApiClient.convertToType(data['webPush'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerCapabilities</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerCapabilities</code>.
     */
    static validateJSON(data) {

        return true;
    }


}





export default ServerCapabilities;

